#ifndef CPU
#define CPU

#include <stdint.h>
#include <stdbool.h>

uint16_t opcode;
uint8_t memory[4096] = {0};
uint8_t graphics[64 * 32] = {0};
uint8_t registers[16] = {0};
uint16_t ind;
uint16_t program_counter;

uint8_t keys[16] = {0};

uint8_t delay_timer;
uint8_t sound_timer;

uint8_t chip8Font[80] = {
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

void init() {
    program_counter = 0x200;

    opcode = 0;
    ind = 0;
    program_counter = 0;
    delay_timer = 0;
    sound_timer = 0;

    for (int i = 0; i < sizeof(chip8Font) / sizeof(chip8Font[0]); i++) {
        memory[i] = chip8Font[i];
    }

}

void increment_pc() {
    program_counter += 1;
}

#endif